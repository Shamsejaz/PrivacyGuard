version: '3.8'

# Production overrides for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Production PostgreSQL with enhanced security
  postgres:
    environment:
      POSTGRES_DB: privacyguard_production
      POSTGRES_USER: privacyguard_prod_user
      # Use Docker secrets in production
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production MongoDB with replica set
  mongodb:
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password
      MONGO_INITDB_DATABASE: privacyguard_production
    secrets:
      - mongo_password
    volumes:
      - mongodb_prod_data:/data/db
      - ./backups/mongodb:/backups
    command: >
      mongod
      --replSet rs0
      --bind_ip_all
      --auth
      --keyFile /etc/mongodb-keyfile
      --wiredTigerCacheSizeGB 1
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Redis with persistence
  redis:
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_prod_data:/data
      - ./backups/redis:/backups
    command: >
      redis-server
      --requirepass-file /run/secrets/redis_password
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'

  # Production Python PII Service with optimizations
  python-pii-service:
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=WARNING
      - WORKERS=8
      - WORKER_CLASS=uvicorn.workers.UvicornWorker
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - PRELOAD_APP=true
      - TIMEOUT=300
      - KEEPALIVE=5
    volumes:
      - pii_models_prod:/app/models
      - ./logs/pii-service:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 180s

  # Production Backend with clustering
  backend:
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=1024
      - CLUSTER_WORKERS=4
      
      # Enhanced security
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - BCRYPT_ROUNDS=14
      
      # Production database connections
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=privacyguard_production
      - POSTGRES_USER=privacyguard_prod_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_MAX_CONNECTIONS=50
      - POSTGRES_SSL=true
      
      - MONGODB_URI_FILE=/run/secrets/mongodb_uri
      - MONGODB_MAX_POOL_SIZE=20
      - MONGODB_MIN_POOL_SIZE=10
      
      - REDIS_HOST=redis
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=0
      - REDIS_MAX_RETRIES=3
      
      # Production logging
      - LOG_LEVEL=warn
      - LOG_CONSOLE=false
      - LOG_FILE=true
      - LOG_AUDIT=true
      - LOG_ROTATION=daily
      - LOG_MAX_FILES=30
      
      # Performance optimizations
      - CACHE_DEFAULT_TTL=3600
      - CACHE_MAX_MEMORY=512mb
      - COMPRESSION_ENABLED=true
      - COMPRESSION_LEVEL=6
      
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=2000
      - RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS=true
      
      # Monitoring
      - MONITORING_ENABLED=true
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30000
      
    secrets:
      - jwt_secret
      - postgres_password
      - mongodb_uri
      - redis_password
    volumes:
      - backend_prod_logs:/app/logs
      - backend_prod_uploads:/app/uploads
      - ./backups/backend:/app/backups
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

  # Production Frontend with optimizations
  frontend:
    environment:
      - VITE_NODE_ENV=production
      - VITE_API_BASE_URL=https://api.privacyguard.com
      - VITE_WS_URL=wss://api.privacyguard.com
      - VITE_PYTHON_PII_ENDPOINT=https://pii.privacyguard.com
      - VITE_APP_NAME=PrivacyGuard
      - VITE_APP_VERSION=1.0.0
      - VITE_SENTRY_DSN=${SENTRY_DSN:-}
      - VITE_ANALYTICS_ID=${ANALYTICS_ID:-}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2

  # Production Nginx with SSL and caching
  nginx:
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cache:/var/cache/nginx
      - nginx_prod_logs:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_KEEPALIVE_TIMEOUT=65
      - NGINX_CLIENT_MAX_BODY_SIZE=50m
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - nginx

  # Production monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: privacyguard-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - privacyguard-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: privacyguard-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    secrets:
      - grafana_password
    networks:
      - privacyguard-network
    profiles:
      - monitoring

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: privacyguard-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - privacyguard-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: privacyguard-logstash-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    depends_on:
      - elasticsearch
    networks:
      - privacyguard-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: privacyguard-kibana-prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - privacyguard-network
    profiles:
      - logging

# Production secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  mongodb_uri:
    file: ./secrets/mongodb_uri.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# Production volumes
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/data/postgres
  mongodb_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/data/mongodb
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/data/redis
  backend_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/logs/backend
  backend_prod_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/uploads
  pii_models_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/models
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/privacyguard/logs/nginx
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local