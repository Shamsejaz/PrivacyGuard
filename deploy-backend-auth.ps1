# PowerShell script to deploy PrivacyComply with backend authentication
# This script configures and deploys the frontend to connect to app.privacycomply.ai

param(
    [switch]$Build,
    [switch]$NoBuild,
    [switch]$Logs,
    [switch]$Stop,
    [switch]$Clean,
    [string]$Environment = "production"
)

# Colors for output
$Red = [System.ConsoleColor]::Red
$Green = [System.ConsoleColor]::Green
$Yellow = [System.ConsoleColor]::Yellow
$Cyan = [System.ConsoleColor]::Cyan
$White = [System.ConsoleColor]::White

function Write-ColorOutput($ForegroundColor, $Message) {
    $originalColor = [Console]::ForegroundColor
    [Console]::ForegroundColor = $ForegroundColor
    Write-Output $Message
    [Console]::ForegroundColor = $originalColor
}

function Show-Header {
    Write-ColorOutput $Cyan @"
üöÄ PrivacyComply Backend Authentication Deployment
================================================
Backend: https://app.privacycomply.ai/api/v1
Mode: Backend Authentication
Environment: $Environment
"@
}

function Test-Prerequisites {
    Write-ColorOutput $Cyan "üîç Checking prerequisites..."
    
    # Check Docker
    try {
        $dockerVersion = docker --version
        Write-ColorOutput $Green "‚úÖ Docker: $dockerVersion"
    }
    catch {
        Write-ColorOutput $Red "‚ùå Docker is not installed or not running"
        exit 1
    }
    
    # Check Docker Compose
    try {
        $composeVersion = docker-compose --version
        Write-ColorOutput $Green "‚úÖ Docker Compose: $composeVersion"
    }
    catch {
        Write-ColorOutput $Red "‚ùå Docker Compose is not installed"
        exit 1
    }
    
    # Check if backend is accessible
    Write-ColorOutput $Cyan "üåê Testing backend connectivity..."
    try {
        $response = Invoke-WebRequest -Uri "https://app.privacycomply.ai/health" -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-ColorOutput $Green "‚úÖ Backend is accessible"
        }
        else {
            Write-ColorOutput $Yellow "‚ö†Ô∏è  Backend returned status: $($response.StatusCode)"
        }
    }
    catch {
        Write-ColorOutput $Yellow "‚ö†Ô∏è  Could not reach backend (this may be normal if health endpoint is not available)"
        Write-ColorOutput $White "   Backend URL: https://app.privacycomply.ai"
    }
}

function Set-BackendAuthMode {
    Write-ColorOutput $Cyan "üîß Configuring backend authentication mode..."
    
    # Create .env.local for backend auth
    $envContent = @"
# Backend Authentication Mode Configuration
# Generated by deploy-backend-auth.ps1

# Live Backend Configuration
VITE_API_BASE_URL=https://app.privacycomply.ai/api/v1
VITE_API_URL=https://app.privacycomply.ai/api/v1
VITE_WS_URL=wss://app.privacycomply.ai
VITE_PYTHON_PII_ENDPOINT=https://app.privacycomply.ai/pii

# App Configuration
VITE_APP_NAME=PrivacyComply
VITE_NODE_ENV=production

# Production Features
VITE_ENABLE_ANALYTICS=true
VITE_ENABLE_ERROR_REPORTING=true
VITE_ENABLE_MONITORING=true

# Deployment Info
VITE_DEPLOYMENT_MODE=backend-auth
VITE_DEPLOYMENT_TIME=$(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
"@
    
    $envContent | Out-File -FilePath ".env.local" -Encoding UTF8
    Write-ColorOutput $Green "‚úÖ Created .env.local with backend authentication configuration"
}

function Start-Deployment {
    Write-ColorOutput $Cyan "üöÄ Starting deployment..."
    
    $composeFile = "docker-compose.backend-auth.yml"
    
    if ($Build -or -not $NoBuild) {
        Write-ColorOutput $Cyan "üî® Building containers..."
        docker-compose -f $composeFile build --no-cache
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput $Red "‚ùå Build failed"
            exit 1
        }
        Write-ColorOutput $Green "‚úÖ Build completed"
    }
    
    Write-ColorOutput $Cyan "üöÄ Starting services..."
    docker-compose -f $composeFile up -d
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput $Red "‚ùå Deployment failed"
        exit 1
    }
    
    Write-ColorOutput $Green "‚úÖ Services started successfully"
}

function Show-Status {
    Write-ColorOutput $Cyan "üìä Deployment Status"
    Write-ColorOutput $White "===================="
    
    docker-compose -f docker-compose.backend-auth.yml ps
    
    Write-ColorOutput $Cyan "`nüåê Access URLs:"
    Write-ColorOutput $White "Frontend: http://localhost"
    Write-ColorOutput $White "Backend API: https://app.privacycomply.ai/api/v1"
    Write-ColorOutput $White "WebSocket: wss://app.privacycomply.ai"
    
    Write-ColorOutput $Cyan "`nüîë Authentication:"
    Write-ColorOutput $White "Use real user accounts from the live backend"
    Write-ColorOutput $Yellow "Demo credentials will NOT work in this mode"
    
    Write-ColorOutput $Cyan "`nüìã Next Steps:"
    Write-ColorOutput $White "1. Open http://localhost in your browser"
    Write-ColorOutput $White "2. Login with valid backend credentials"
    Write-ColorOutput $White "3. Check browser console for connection status"
}

function Show-Logs {
    Write-ColorOutput $Cyan "üìã Showing logs..."
    docker-compose -f docker-compose.backend-auth.yml logs -f
}

function Stop-Services {
    Write-ColorOutput $Cyan "üõë Stopping services..."
    docker-compose -f docker-compose.backend-auth.yml down
    Write-ColorOutput $Green "‚úÖ Services stopped"
}

function Clean-Deployment {
    Write-ColorOutput $Cyan "üßπ Cleaning up..."
    docker-compose -f docker-compose.backend-auth.yml down -v --remove-orphans
    docker system prune -f
    Write-ColorOutput $Green "‚úÖ Cleanup completed"
}

# Main execution
Show-Header

if ($Stop) {
    Stop-Services
    exit 0
}

if ($Clean) {
    Clean-Deployment
    exit 0
}

if ($Logs) {
    Show-Logs
    exit 0
}

Test-Prerequisites
Set-BackendAuthMode
Start-Deployment
Show-Status

Write-ColorOutput $Green "`nüéâ Backend authentication deployment completed successfully!"
Write-ColorOutput $White "Frontend is now connected to: https://app.privacycomply.ai"