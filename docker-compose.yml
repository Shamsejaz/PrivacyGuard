version: '3.8'

services:
  # Frontend - Main service for Coolify (Port 80)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - VITE_API_BASE_URL=${API_URL:-http://localhost:3001}
      - VITE_WS_URL=${WS_URL:-ws://localhost:3001}
      - VITE_APP_NAME=PrivacyComply
      - VITE_APP_VERSION=1.0.0
      - VITE_NODE_ENV=production
    depends_on:
      - backend
    networks:
      - privacycomply-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Backend - Using development mode to avoid build issues
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0

      # Database Configuration with default passwords
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-privacycomply_prod}
      - POSTGRES_USER=${POSTGRES_USER:-privacycomply_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-privacycomply_secure_password_2024}
      - POSTGRES_MAX_CONNECTIONS=20

      - MONGODB_URI=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-mongo_secure_password_2024}@mongodb:27017/${MONGO_DB:-privacycomply_prod}?authSource=admin
      - MONGODB_MAX_POOL_SIZE=10
      - MONGODB_MIN_POOL_SIZE=5

      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_password_2024}
      - REDIS_DB=0

      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:-coolify_jwt_secret_at_least_32_characters_long_for_production_security_2024}
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=12

      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - CORS_CREDENTIALS=true

      # Logging Configuration
      - LOG_LEVEL=debug
      - LOG_CONSOLE=true
      - LOG_FILE=true
      - LOG_AUDIT=true

      # Disable PII service for faster deployment
      - PII_SERVICE_ENABLED=false
      - PII_SERVICE_URL=disabled

      # Development flags
      - DEBUG_MODE=true
      - ENABLE_SWAGGER=true
      - SEED_DATA=true

    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - privacycomply-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # PostgreSQL Database - Internal service
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-privacycomply_prod}
      POSTGRES_USER: ${POSTGRES_USER:-privacycomply_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-privacycomply_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - privacycomply-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-privacycomply_user} -d ${POSTGRES_DB:-privacycomply_prod}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Database - Internal service
  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongo_secure_password_2024}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-privacycomply_prod}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - privacycomply-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache - Internal service
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - privacycomply-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_password_2024}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  privacycomply-network:
    driver: bridge
