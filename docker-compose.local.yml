version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: privacyguard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: privacyguard_local
      POSTGRES_USER: privacyguard_user
      POSTGRES_PASSWORD: local_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U privacyguard_user -d privacyguard_local"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: privacyguard-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: local_admin_123
      MONGO_INITDB_DATABASE: privacyguard_local
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: privacyguard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: privacyguard-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=privacyguard_local
      - POSTGRES_USER=privacyguard_user
      - POSTGRES_PASSWORD=local_password_123
      - POSTGRES_MAX_CONNECTIONS=10
      
      - MONGODB_URI=mongodb://admin:local_admin_123@mongodb:27017/privacyguard_local?authSource=admin
      - MONGODB_MAX_POOL_SIZE=5
      - MONGODB_MIN_POOL_SIZE=2
      
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Security Configuration
      - JWT_SECRET=local_development_jwt_secret_at_least_32_characters_long_for_security
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=10
      
      # CORS Configuration
      - CORS_ORIGIN=http://localhost:5173
      - CORS_CREDENTIALS=true
      
      # Logging Configuration
      - LOG_LEVEL=debug
      - LOG_CONSOLE=true
      - LOG_FILE=true
      - LOG_AUDIT=true
      
      # External Services
      - PII_SERVICE_URL=http://python-pii-service:8000
      
      # Development Flags
      - DEBUG_MODE=true
      - ENABLE_SWAGGER=true
      - ENABLE_DEBUG_ROUTES=true
      - SEED_DATA=true
      
      # AWS Configuration (optional - for testing)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-sonnet-20240229-v1:0}
      
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      python-pii-service:
        condition: service_healthy
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: privacyguard-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
      - VITE_PYTHON_PII_ENDPOINT=http://localhost:8000
      - VITE_APP_NAME=PrivacyGuard Local
      - VITE_APP_VERSION=1.0.0-local
      - VITE_NODE_ENV=development
    depends_on:
      - backend
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Python PII Detection Service
  python-pii-service:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: privacyguard-pii-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - pii_models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s  # PII service needs time to download models

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: privacyguard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/local.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - privacyguard-network
    profiles:
      - production-like

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: privacyguard-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - privacyguard-network
    profiles:
      - tools

  # Mongo Express - MongoDB Management UI
  mongo-express:
    image: mongo-express:latest
    container_name: privacyguard-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: local_admin_123
      ME_CONFIG_MONGODB_URL: mongodb://admin:local_admin_123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb
    networks:
      - privacyguard-network
    profiles:
      - tools

  # Redis Commander - Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: privacyguard-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - privacyguard-network
    profiles:
      - tools

  # Mailhog - Email Testing (for DSAR notifications)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: privacyguard-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - privacyguard-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  pii_models:
    driver: local

networks:
  privacyguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16