version: '3.8'

services:
  # PostgreSQL Database for Development
  postgres-dev:
    image: postgres:15-alpine
    container_name: privacyguard-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: privacyguard_dev
      POSTGRES_USER: privacyguard_dev_user
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U privacyguard_dev_user -d privacyguard_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database for Development
  mongodb-dev:
    image: mongo:7-jammy
    container_name: privacyguard-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: dev_admin_123
      MONGO_INITDB_DATABASE: privacyguard_dev
    ports:
      - "27018:27017"
    volumes:
      - mongodb_dev_data:/data/db
      - ./backend/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Development
  redis-dev:
    image: redis:7-alpine
    container_name: privacyguard-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python PII Detection Service - Development
  python-pii-service:
    build:
      context: .
      dockerfile: Dockerfile.python
      target: development
    container_name: privacyguard-pii-service-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./python_pii_service:/app
      - pii_models_dev:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - RELOAD=true
      - WORKERS=1
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Backend Service - Development
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: privacyguard-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugger port
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_dev_logs:/app/logs
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      - DEBUG=privacyguard:*
      
      # Database Configuration
      - POSTGRES_HOST=postgres-dev
      - POSTGRES_PORT=5432
      - POSTGRES_DB=privacyguard_dev
      - POSTGRES_USER=privacyguard_dev_user
      - POSTGRES_PASSWORD=dev_password_123
      - POSTGRES_MAX_CONNECTIONS=10
      
      - MONGODB_URI=mongodb://admin:dev_admin_123@mongodb-dev:27017/privacyguard_dev?authSource=admin
      - MONGODB_MAX_POOL_SIZE=5
      - MONGODB_MIN_POOL_SIZE=2
      
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Security Configuration
      - JWT_SECRET=development_jwt_secret_at_least_32_characters_long_for_security
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=10
      
      # CORS Configuration
      - CORS_ORIGIN=http://localhost:5173
      - CORS_CREDENTIALS=true
      
      # Logging Configuration
      - LOG_LEVEL=debug
      - LOG_CONSOLE=true
      - LOG_FILE=true
      - LOG_AUDIT=true
      
      # External Services
      - PII_SERVICE_URL=http://python-pii-service:8000
      
      # Development Flags
      - DEBUG_MODE=true
      - ENABLE_SWAGGER=true
      - ENABLE_DEBUG_ROUTES=true
      - SEED_DATA=true
      - HOT_RELOAD=true
      
      # AWS Configuration (optional - for testing)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-sonnet-20240229-v1:0}
      
    depends_on:
      postgres-dev:
        condition: service_healthy
      mongodb-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
      python-pii-service:
        condition: service_healthy
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Service - Development
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: privacyguard-frontend-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
      - VITE_PYTHON_PII_ENDPOINT=http://localhost:8000
      - VITE_APP_NAME=PrivacyGuard Dev
      - VITE_APP_VERSION=1.0.0-dev
      - VITE_NODE_ENV=development
      - VITE_DEBUG=true
      - VITE_HOT_RELOAD=true
    depends_on:
      - backend-dev
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: privacyguard-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres-dev
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres-dev
    networks:
      - privacyguard-network

  mongo-express:
    image: mongo-express:latest
    container_name: privacyguard-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: dev_admin_123
      ME_CONFIG_MONGODB_URL: mongodb://admin:dev_admin_123@mongodb-dev:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb-dev
    networks:
      - privacyguard-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: privacyguard-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis-dev:6379
    depends_on:
      - redis-dev
    networks:
      - privacyguard-network

  # Email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: privacyguard-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - privacyguard-network

  # Development monitoring
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: privacyguard-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - privacyguard-network
    profiles:
      - monitoring

  grafana-dev:
    image: grafana/grafana:latest
    container_name: privacyguard-grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - privacyguard-network
    profiles:
      - monitoring

  # Code quality tools
  sonarqube:
    image: sonarqube:community
    container_name: privacyguard-sonarqube-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_dev_data:/opt/sonarqube/data
      - sonarqube_dev_extensions:/opt/sonarqube/extensions
      - sonarqube_dev_logs:/opt/sonarqube/logs
    networks:
      - privacyguard-network
    profiles:
      - quality

volumes:
  postgres_dev_data:
    driver: local
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_dev_logs:
    driver: local
  pii_models_dev:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  sonarqube_dev_data:
    driver: local
  sonarqube_dev_extensions:
    driver: local
  sonarqube_dev_logs:
    driver: local

networks:
  privacyguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16