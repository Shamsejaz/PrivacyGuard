import React, { useState } from 'react';
import { AlertTriangle, Shield, Eye, Filter, Download } from 'lucide-react';
import Card from '../ui/Card';
import Badge from '../ui/Badge';
import Button from '../ui/Button';

interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  category: 'data_exposure' | 'access_control' | 'encryption' | 'compliance' | 'configuration';
  affectedSystems: string[];
  riskScore: number;
  detectedDate: Date;
  status: 'open' | 'in_progress' | 'resolved' | 'accepted';
  remediation: string;
  regulatoryImpact: string[];
  cvssScore?: number;
}

const VulnerabilityMatrix: React.FC = () => {
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');

  const vulnerabilities: Vulnerability[] = [
    {
      id: '1',
      title: 'Unencrypted PII in Customer Database',
      description: 'Personal identifiable information stored without encryption in production database',
      severity: 'critical',
      category: 'encryption',
      affectedSystems: ['Customer DB', 'CRM System'],
      riskScore: 95,
      detectedDate: new Date('2024-01-15T10:30:00'),
      status: 'open',
      remediation: 'Implement column-level encryption for PII fields',
      regulatoryImpact: ['GDPR', 'CCPA'],
      cvssScore: 8.5
    },
    {
      id: '2',
      title: 'Excessive Admin Privileges',
      description: 'Multiple users have unnecessary administrative access to sensitive data',
      severity: 'high',
      category: 'access_control',
      affectedSystems: ['HR Database', 'Financial System'],
      riskScore: 78,
      detectedDate: new Date('2024-01-14T16:45:00'),
      status: 'in_progress',
      remediation: 'Implement principle of least privilege access controls',
      regulatoryImpact: ['GDPR', 'HIPAA'],
      cvssScore: 7.2
    },
    {
      id: '3',
      title: 'Missing Data Retention Policies',
      description: 'No automated data retention policies configured for customer data',
      severity: 'medium',
      category: 'compliance',
      affectedSystems: ['All Systems'],
      riskScore: 65,
      detectedDate: new Date('2024-01-13T09:15:00'),
      status: 'open',
      remediation: 'Configure automated data retention and deletion policies',
      regulatoryImpact: ['GDPR', 'CCPA'],
    },
    {
      id: '4',
      title: 'Unsecured API Endpoints',
      description: 'API endpoints exposing customer data without proper authentication',
      severity: 'high',
      category: 'data_exposure',
      affectedSystems: ['Customer API', 'Mobile App'],
      riskScore: 82,
      detectedDate: new Date('2024-01-12T14:20:00'),
      status: 'resolved',
      remediation: 'Implement OAuth 2.0 authentication for all API endpoints',
      regulatoryImpact: ['GDPR', 'CCPA', 'PDPL'],
      cvssScore: 7.8
    },
    {
      id: '5',
      title: 'Default Security Configurations',
      description: 'Cloud storage buckets using default security settings',
      severity: 'medium',
      category: 'configuration',
      affectedSystems: ['AWS S3', 'Azure Blob'],
      riskScore: 58,
      detectedDate: new Date('2024-01-11T11:30:00'),
      status: 'in_progress',
      remediation: 'Harden cloud storage security configurations',
      regulatoryImpact: ['GDPR'],
      cvssScore: 6.1
    },
    {
      id: '6',
      title: 'Insufficient Audit Logging',
      description: 'Critical data access events not being logged properly',
      severity: 'medium',
      category: 'compliance',
      affectedSystems: ['Database Systems', 'File Servers'],
      riskScore: 61,
      detectedDate: new Date('2024-01-10T08:45:00'),
      status: 'accepted',
      remediation: 'Implement comprehensive audit logging for all data access',
      regulatoryImpact: ['HIPAA', 'GDPR'],
    }
  ];

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical': return <Badge variant="danger">Critical</Badge>;
      case 'high': return <Badge variant="danger">High</Badge>;
      case 'medium': return <Badge variant="warning">Medium</Badge>;
      case 'low': return <Badge variant="success">Low</Badge>;
      default: return <Badge variant="default">Unknown</Badge>;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'open': return <Badge variant="danger">Open</Badge>;
      case 'in_progress': return <Badge variant="warning">In Progress</Badge>;
      case 'resolved': return <Badge variant="success">Resolved</Badge>;
      case 'accepted': return <Badge variant="info">Accepted</Badge>;
      default: return <Badge variant="default">Unknown</Badge>;
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'data_exposure': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'access_control': return <Shield className="h-4 w-4 text-blue-500" />;
      case 'encryption': return <Shield className="h-4 w-4 text-purple-500" />;
      case 'compliance': return <Shield className="h-4 w-4 text-green-500" />;
      case 'configuration': return <Shield className="h-4 w-4 text-orange-500" />;
      default: return <Shield className="h-4 w-4 text-gray-500" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const severityMatch = selectedSeverity === 'all' || vuln.severity === selectedSeverity;
    const categoryMatch = selectedCategory === 'all' || vuln.category === selectedCategory;
    return severityMatch && categoryMatch;
  });

  const severityCounts = {
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length,
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Critical</p>
              <p className="text-2xl font-bold text-red-600">{severityCounts.critical}</p>
            </div>
            <AlertTriangle className="h-8 w-8 text-red-600" />
          </div>
        </Card>
        <Card>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">High</p>
              <p className="text-2xl font-bold text-orange-600">{severityCounts.high}</p>
            </div>
            <AlertTriangle className="h-8 w-8 text-orange-600" />
          </div>
        </Card>
        <Card>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Medium</p>
              <p className="text-2xl font-bold text-yellow-600">{severityCounts.medium}</p>
            </div>
            <AlertTriangle className="h-8 w-8 text-yellow-600" />
          </div>
        </Card>
        <Card>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Low</p>
              <p className="text-2xl font-bold text-green-600">{severityCounts.low}</p>
            </div>
            <Shield className="h-8 w-8 text-green-600" />
          </div>
        </Card>
      </div>

      <Card>
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">Vulnerability Assessment</h2>
          <div className="flex items-center space-x-3">
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
            <Button size="sm">
              <Eye className="h-4 w-4 mr-2" />
              View Report
            </Button>
          </div>
        </div>

        <div className="flex items-center space-x-4 mb-6">
          <div className="flex items-center space-x-2">
            <Filter className="h-4 w-4 text-gray-400" />
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">All Categories</option>
            <option value="data_exposure">Data Exposure</option>
            <option value="access_control">Access Control</option>
            <option value="encryption">Encryption</option>
            <option value="compliance">Compliance</option>
            <option value="configuration">Configuration</option>
          </select>
        </div>

        <div className="space-y-4">
          {filteredVulnerabilities.map((vulnerability) => (
            <div key={vulnerability.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-start space-x-3">
                  {getCategoryIcon(vulnerability.category)}
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900 mb-1">{vulnerability.title}</h3>
                    <p className="text-sm text-gray-600 mb-2">{vulnerability.description}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span>Risk Score: {vulnerability.riskScore}</span>
                      {vulnerability.cvssScore && (
                        <span>CVSS: {vulnerability.cvssScore}</span>
                      )}
                      <span>Detected: {vulnerability.detectedDate.toLocaleDateString()}</span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {getSeverityBadge(vulnerability.severity)}
                  {getStatusBadge(vulnerability.status)}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                <div>
                  <p className="text-sm font-medium text-gray-700 mb-1">Affected Systems</p>
                  <div className="flex flex-wrap gap-1">
                    {vulnerability.affectedSystems.map((system) => (
                      <Badge key={system} variant="default" size="sm">
                        {system}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-700 mb-1">Regulatory Impact</p>
                  <div className="flex flex-wrap gap-1">
                    {vulnerability.regulatoryImpact.map((regulation) => (
                      <Badge key={regulation} variant="info" size="sm">
                        {regulation}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 p-3 rounded-lg">
                <p className="text-sm font-medium text-gray-700 mb-1">Recommended Remediation</p>
                <p className="text-sm text-gray-600">{vulnerability.remediation}</p>
              </div>
            </div>
          ))}
        </div>

        {filteredVulnerabilities.length === 0 && (
          <div className="text-center py-8">
            <p className="text-gray-500">No vulnerabilities match your filter criteria.</p>
          </div>
        )}
      </Card>
    </div>
  );
};

export default VulnerabilityMatrix;