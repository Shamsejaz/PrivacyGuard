version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: privacyguard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-privacyguard}
      POSTGRES_USER: ${POSTGRES_USER:-privacyguard_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
      - ./backups/postgresql:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-privacyguard_user} -d ${POSTGRES_DB:-privacyguard}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: privacyguard-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-privacyguard}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backups/mongodb:/backups
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: privacyguard-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - privacyguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: privacyguard-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-privacyguard}
      POSTGRES_USER: ${POSTGRES_USER:-privacyguard_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 20
      POSTGRES_SSL: "false"
      
      MONGODB_URI: mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DB:-privacyguard}?authSource=admin
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: 12
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      CORS_CREDENTIALS: "true"
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_CONSOLE: "true"
      LOG_FILE: "true"
      LOG_AUDIT: "true"
      
      # Monitoring Configuration
      MONITORING_HEALTH_CHECKS: "true"
      MONITORING_METRICS: "true"
      ALERT_RESPONSE_TIME: 5000
      ALERT_ERROR_RATE: 0.05
      
      # Backup Configuration
      BACKUP_ENABLED: "true"
      BACKUP_SCHEDULE: "0 2 * * *"
      BACKUP_RETENTION_DAILY: 7
      BACKUP_COMPRESSION: "true"
      
      # Email Configuration (optional)
      EMAIL_ENABLED: ${EMAIL_ENABLED:-false}
      EMAIL_PROVIDER: ${EMAIL_PROVIDER:-smtp}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
    volumes:
      - backend_logs:/app/logs
      - backend_backups:/app/backups
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - privacyguard-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./scripts/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: privacyguard-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3001/api/v1}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - privacyguard-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # NGINX Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: privacyguard-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - privacyguard-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Monitoring (Prometheus - optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: privacyguard-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - privacyguard-network
    profiles:
      - monitoring

  # Log Aggregation (Grafana - optional)
  grafana:
    image: grafana/grafana:latest
    container_name: privacyguard-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - privacyguard-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  privacyguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16