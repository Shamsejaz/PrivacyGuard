version: '3.8'

services:
  # Frontend - Production deployment
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_API_BASE_URL=${API_URL:-https://app.privacycomply.ai/api/v1}
      - VITE_WS_URL=${WS_URL:-wss://app.privacycomply.ai}
      - VITE_APP_NAME=PrivacyComply
      - VITE_APP_VERSION=1.0.0
      - VITE_NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - privacycomply-network
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Backend - Production deployment
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      
      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-privacycomply_prod}
      - POSTGRES_USER=${POSTGRES_USER:-privacycomply_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_this_secure_password}
      - POSTGRES_MAX_CONNECTIONS=50
      
      - MONGODB_URI=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-change_this_mongo_password}@mongodb:27017/${MONGO_DB:-privacycomply_prod}?authSource=admin
      - MONGODB_MAX_POOL_SIZE=20
      - MONGODB_MIN_POOL_SIZE=5
      
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-change_this_redis_password}
      - REDIS_DB=0
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET:-change_this_super_secret_jwt_key_at_least_32_characters_long}
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=12
      
      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-https://app.privacycomply.ai,https://privacycomply.ai}
      - CORS_CREDENTIALS=true
      
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_CONSOLE=true
      - LOG_FILE=true
      - LOG_AUDIT=true
      
      # PII Service Configuration
      - PII_SERVICE_ENABLED=${PII_SERVICE_ENABLED:-false}
      - PII_SERVICE_URL=${PII_SERVICE_URL:-disabled}
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      
      # SSL/TLS Configuration
      - FORCE_HTTPS=true
      - TRUST_PROXY=true
      
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - privacycomply-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-privacycomply_prod}
      POSTGRES_USER: ${POSTGRES_USER:-privacycomply_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - privacycomply-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-privacycomply_user} -d ${POSTGRES_DB:-privacycomply_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-change_this_mongo_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-privacycomply_prod}
    volumes:
      - mongodb_data:/data/db
      - ./backend/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - privacycomply-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-change_this_redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - privacycomply-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-change_this_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.25'
        reservations:
          memory: 512M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  privacycomply-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
